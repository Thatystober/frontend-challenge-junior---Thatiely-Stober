"use strict";function _typeof(n){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(n,r,e){o.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:e})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(r,n){if(1&n&&(r=o(r)),8&n)return r;if(4&n&&"object"===_typeof(r)&&r&&r.__esModule)return r;var e=Object.create(null);if(o.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:r}),2&n&&"string"!=typeof r)for(var t in r)o.d(e,t,function(n){return r[n]}.bind(null,t));return e},o.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(r,"a",r),r},o.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},o.p="",o(o.s="./src/js/main.js")}({"./src/js/main.js":function srcJsMainJs(module,exports){eval("var swiper = new Swiper ('.swiper', {\r\n  loop: false,\r\n  allowTouchMove: true,\r\n  effect: 'fade',\r\n  speed: 300,\r\n  autoplay: {\r\n    delay: 5000,\r\n  }\r\n})        \r\n\r\nvar swiperProducts = new Swiper ('.swiper-products', {\r\n  loop: false,\r\n  effect: 'fade',\r\n  navigation: {\r\n    nextEl: '.swiper-button-next',\r\n    prevEl: '.swiper-button-prev',\r\n  }\r\n})\r\n\r\n$(document).ready(function(){\r\n    $('.none a').click(function(e){\r\n      e.preventDefault();\r\n      var id = $(this).attr('href');\r\n      var targetOffset = $(id).offset().top;\r\n\r\n      $('html, body').animate({\r\n        scrollTop: targetOffset\r\n      }, 1000);\r\n      \r\n    })\r\n\r\n    // MENU\r\n    $(function(){   \r\n      var nav = $('header');   \r\n      $(window).scroll(function () { \r\n          if ($(this).scrollTop() > 150) { \r\n              nav.addClass(\"sticky\");\r\n              $('.cakes').css('padding-top', 70);\r\n          } else { \r\n              nav.removeClass(\"sticky\"); \r\n              $('.cakes').css('padding-top', 0);\r\n          } \r\n      });  \r\n    });\r\n\r\n    $('.mobile-nav-icon').click(function(){\r\n      var nav = $('.main');\r\n      nav.slideToggle(200);\r\n    });\r\n});\n\n//# sourceURL=webpack:///./src/js/main.js?")}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
